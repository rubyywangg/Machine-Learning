# -*- coding: utf-8 -*-
"""Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g1Uz9YprLXECUEk8lrhnYzAmjDHUzuQB
"""

import pandas as pd
import numpy as np
# in a specified number of wines, we are looking at the differnt ingredients in each wine and seeing predicting how much alcholol there is and then comparing it to how much alcohol there actually is

url = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTDsF-Aey_9_nQWZPFiAZgavpg8p2WEH0oLtofQI9E7XoCQrpe7uSlyqcFnGibYTrpy6RnIa2Vq1Dba/pub?output=csv'

df = pd.read_csv(url) #use pandas to convert url to data frame

print(df.head()) #prints out the first 5 rows of each column

#need our traning and testing data set
num_rows, num_cols = df.shape
print(num_rows, num_cols) #6497 rows and 13 columns

#get rid of the first row
df = df.iloc[:,1:num_cols] #want all the rows but only start from 1st index for columns

num_rows, num_cols = df.shape
print(num_rows,num_cols) #print updated sit after getting rid of one column from before

data = df.values #assign

#build our x variable and y variables
#if we are specifically getting the acholol list:
y_idx = 10 #alcohol index
x_idxs = []
#add every index that isnt our output
for i in range (num_cols):
  if i != y_idx:
    x_idxs.append(i)

print(x_idxs) #notice 10 is NOT included in the list

#X is a matrix and y is a vector
X, y = data[:,x_idxs], data [:,y_idx]

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 1) #test_size splits the testing data to 25% and training data to 75%

print(X_train.shape, X_test.shape, y_train.shape, y_test.shape) #shows you the matrix for the training and testing data

#now let's get the computer to learn something!
from sklearn.linear_model import LinearRegression

model = LinearRegression()
#modeling the linear regression model
model.fit(X_train, y_train)

#output of machine learning model (prediction)
y_hat = model.predict(X_test) #yhat represents a prediction of how much acholol there is

from sklearn.metrics import mean_absolute_error #calcualutes the mean absolute error (since you will never have 0 error)

avg_error = mean_absolute_error(y_test, y_hat) #ytest is how much alcohol there is ACTUALLY

print(avg_error) #this is the percentage of alcohol

import matplotlib.pyplot as plt

plt.scatter (y_test,y_hat) #create a plot with scatter points
plt.xlabel('Atual value') #x axis label
plt.ylabel('Predicted Value') #y axis label
plt.xlim(6,15) #range showne in plot for x axis
plt.ylim(6,15)#range showne in plot for x axis


#what conclusion can you draw from this?
#we've plotted the actual value against the predicted value. if we plotted it correctly, we would get a straight line (linear line y= mx+b). This is defintiely not a linear line, but its very close and the line of best fit would be linear with some outliers (but that is expected)
#this function is in 11D (11 dimensions)

#let's apply some data analytics
var_names =df.columns
print(var_names)

coeffs = model.coef_
intercept = model.intercept_

print(f"The amount of {var_names[y_idx]} is modelled by: ")
x_var_names = df.columns.tolist()
x_var_names.remove(var_names[y_idx]) #get rid of all the x value names except the alcohol one

for i in range(len(x_var_names)):
  print(f"{coeffs[i]} times {x_var_names[i]}") #prints out the percentage of how much ingredient is in each wine (these are the slopes)
  #large numbers like density probably have a high impact on the wine while small values like free sulfur dioxide probbaly have little impact (can investigate these further to draw conclusions)

